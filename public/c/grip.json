{
  "name": "grip",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "grip.tsx",
      "content": "'use client';\n\nimport { AnimatePresence, motion, useAnimation } from 'motion/react';\nimport { useEffect, useState } from 'react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface GripIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface GripIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst CIRCLES = [\n  { cx: 19, cy: 5 }, // Top right\n  { cx: 12, cy: 5 }, // Top middle\n  { cx: 19, cy: 12 }, // Middle right\n  { cx: 5, cy: 5 }, // Top left\n  { cx: 12, cy: 12 }, // Center\n  { cx: 19, cy: 19 }, // Bottom right\n  { cx: 5, cy: 12 }, // Middle left\n  { cx: 12, cy: 19 }, // Bottom middle\n  { cx: 5, cy: 19 }, // Bottom left\n];\n\nconst GripIcon = forwardRef<GripIconHandle, GripIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: async () => setIsHovered(true),\n        stopAnimation: () => setIsHovered(false),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          setIsHovered(true);\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          setIsHovered(false);\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [onMouseLeave]\n    );\n\n    useEffect(() => {\n      const animateCircles = async () => {\n        if (isHovered) {\n          await controls.start((i) => ({\n            opacity: 0.3,\n            transition: {\n              delay: i * 0.1,\n              duration: 0.2,\n            },\n          }));\n          await controls.start((i) => ({\n            opacity: 1,\n            transition: {\n              delay: i * 0.1,\n              duration: 0.2,\n            },\n          }));\n        }\n      };\n\n      animateCircles();\n    }, [isHovered, controls]);\n\n    return (\n      <div\n        className={cn(\n          `cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center`,\n          className\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <AnimatePresence>\n            {CIRCLES.map((circle, index) => (\n              <motion.circle\n                key={`${circle.cx}-${circle.cy}`}\n                cx={circle.cx}\n                cy={circle.cy}\n                r=\"1\"\n                initial=\"initial\"\n                variants={{\n                  initial: {\n                    opacity: 1,\n                  },\n                }}\n                animate={controls}\n                exit=\"initial\"\n                custom={index}\n              />\n            ))}\n          </AnimatePresence>\n        </svg>\n      </div>\n    );\n  }\n);\n\nGripIcon.displayName = 'GripIcon';\n\nexport { GripIcon };\n",
      "type": "registry:ui"
    }
  ]
}